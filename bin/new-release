#!/bin/bash

module=$1
shift
version=$1
shift
modulebasedir=$1
shift
name="$*"

if test -z $module
then
  echo Please specify a module
  exit 1
fi

if test -z "$version"
then
  echo Please specify a version
  exit 1
fi

if test -z "$modulebasedir"
then
  echo "Please specify a module base dir (root of your checkout)"
  exit 1
fi

if test -z "$name"
then
  echo Please specify a release name
  exit 1
fi

if test ! -d $modulebasedir/gstreamer
then
  echo $modulebasedir does not contain a "gstreamer" directory
  exit 1
fi

moduledir=$modulebasedir/$module

echo "Updating CVS"
pushd $moduledir > /dev/null 2>&1
git pull
popd

release=src/htdocs/releases/$module/$version
template=src/htdocs/releases/$module/template.xml
if test ! -e $template
then
  echo "No template $template !"
  exit 1
fi
if test ! -e $release.xml
then
  echo "Creating $release.xml"
  cp $template $release.xml
fi
echo "Updating $release.xml"
perl -i -p -e "s@<version></version>@<version>$version</version>@" $release.xml
perl -i -p -e "s@<name></name>@<name>$name</name>@" $release.xml
echo "Updating contributors"
changelog=$moduledir/ChangeLog
if test ! -e $changelog
then
  echo "No changelog $changelog found"
else
  bin/update-contributors $changelog $release.xml
fi
echo "Updating bugs"
bin/bugzilla $module $version GStreamer $release.xml

# update releases Makefile.am
makefileam=src/htdocs/releases/$module/Makefile.am
if grep $version $makefileam > /dev/null 2>&1
then
  echo already changed $makefileam
else
  echo Updating $makefileam
  perl -i.bak -p -e "s@(releases =)@\$1 $version@" $makefileam
fi
# Mark for committing
git add $makefileam

# update configure.ac
configureac=$moduledir/configure.ac
echo "Press Enter to update configure.ac's version and libtool versioning."
read
$EDITOR $configureac

echo "Rebuilding to update version numbering"
pushd $moduledir > /dev/null 2>&1
make > out 2>&1 || ( echo "Build failed"; exit 1 )
popd

# update Changelog
changelog=$moduledir/ChangeLog
if grep "=== release $version ===" $changelog > /dev/null 2>&1
then
  echo already changed $changelog
else
  echo Updating $changelog
  mv $changelog $changelog.bak
  echo "=== release $version ===" > $changelog
  echo >> $changelog
  echo "`date +%Y-%m-%d`  $REAL_NAME <$EMAIL_ADDRESS>" >> $changelog
  echo >> $changelog
  echo -e "\t* configure.ac:" >> $changelog
  echo -e "\t  releasing $version, \"$name\"" >> $changelog
  echo >> $changelog
  cat $changelog.bak >> $changelog
fi

echo "Now press Enter to edit the next .xml file and update the list of features and API changes"
read

$EDITOR $release.xml

# Mark for committing
git add $release.xml


echo "Building website"
make

release=htdocs/releases/$module/$version
echo "Copying RELEASE"
cp $release $moduledir/RELEASE

echo "Press Enter to update NEWS with information from RELEASE"
read
$EDITOR $moduledir/NEWS $release

if test -d $moduledir/docs/plugins
then
  echo "Updating plugin documentation files"
  pushd $moduledir/docs/plugins > /dev/null 2>&1
  make update
  popd
fi

echo "Rolling release tarballs"
pushd $moduledir > /dev/null 2>&1
make release > /dev/null 2>&1 || exit 1
popd
mv $moduledir/$module-$version.tar.* data/src/$module

if [ -d $moduledir/docs ]; then
echo "Updating docs on website"
pushd $moduledir/docs > /dev/null 2>&1
make upload > /dev/null 2>&1
popd
else
echo "Not updating docs on website - no docs directory"
fi

if test -d $moduledir/po
then
  echo "Press Enter to commit updates to .po files"
  read
  pushd $moduledir > /dev/null 2>&1
  git commit -m "Update .po files" po/*.po
  popd
fi

cd $moduledir
git diff > release.diff
echo "Press Enter to review the git diff"
less -R release.diff
