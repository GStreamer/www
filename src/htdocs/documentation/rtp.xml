<?xml version="1.0"?>
<!DOCTYPE xml
[
  <!ENTITY % site-entities SYSTEM "../entities.site">
  %site-entities;
  <!ENTITY % gst-entities SYSTEM "../entities.gst">
  %gst-entities;
]>
<?xml-stylesheet href="../page.xsl" type="text/xsl"?>
<page>
<title>GStreamer: RTP support</title>
<body>
  <H1>RTP in Gstreamer 0.9</H1>
<p>Philippe Khalaf &lt;burger@speedy.org&gt;</p>
<p>
Any questions you have you can find me on #farsight or #gstreamer on freenode, my nickname is Burger.</p>
<FONT COLOR="#ff0000">This is still under HEAVY developpement, don't expect it to work well, assuming it actually does work</FONT>
<H2>Intro</H2>
<p>This document describes how to get RTP working in GStreamer 0.9 CVS. RTP support it based on JRTPLib. The required elements are currently all located on <A HREF="http://farsight.sourceforge.net">Farsight</A>'s CVS under gst-plugins-0.9 module.</p>

<p>Current state : (15/08/05) Some more changes to RTPBin :
<ul>
<li>No more GstRTPBuffer, instead we use normal GstBuffer's with full rtp
packets inside of them. gstrtpbuffer.[ch] contain all the helper parse
functions that allow to build and read/write the rtp headers.</li>
<li>No more modes, the mode is determined by on request pads. So depending on
your requested pads a mode will be selected.</li>
<li>Parameter to turn on/off RTCP</li>
<li>The jrtp gst plugin has be moved to gst-plugins-bad, it will be maintained
there instead of farsight's CVS</li>
</ul>

(20/07/05) Brand spanking new RTPBin element. It's dynamic. It has 6 modes :
<ul>
<li>Send and Receive</li>
<li>Send Only</li>
<li>Receive Only</li>
<li>Send and Receive without RTCP</li>
<li>Send Only without RTCP</li>
<li>Receive Only without RTCP</li>
</ul>
 I think they are self-explanatory.
</p>
<p>(14/07/05) Basic RTP support is in the CVS. By basic I mean this is the first version of RTP, at it's most simple form. It has RTCP support, meaning it will receive and send RTCP packets, and process them. That information is still not being used actively by the system.
It also provides a depayloader base class. This shall be used by codec specific depayloaders.  It implements generic functions such as buffering, reordering and dropping packets.</p>
<H2>How to use it</H2>
<ul>
<li>First you need to have gstreamer, gst-base-plugins and gst-plugins CVS, (You can install it or run it uninstalled).</li>
<li>Then you need to have jrtplib and gst-plugins-0.9 (both from Farsight's CVS). You can also run both of these installed or uninstalled.</li>
</ul>
Here is what you get :
<ul>
<li>rtpbin : This is the bin that does it all. It adapts dynamically to your
needs based on the requested pads.</li> 
<li>BaseRTPDepayload: A base depayloader class that should be used by any RTP depayloaders you write (h263depayloader is an example depayloader element that uses BaseRTPDepayload class).</li>
<li>BaseRTPPayload: A base payloader class that should be used by any RTP
payloaders you write.</li>
</ul>
<p>If you want to use rtpbin, there are a few things you need to know :
</p>
<ul>
<li>To use it you need to set the localport, otherwise it won't work.</li>
<li>If sending data, the destinations must be added with the signal "add-destination". This can contain one or more ip:port combinations with the following syntax (127.0.0.1:5000;192.168.1.101:4000;).</li>
<li>Any buffers that go into <b>sink</b> MUST be rtp buffers. They MUST contain the timestamp increment, the mark and the payload type in them.</li>
<li><b>src</b> also gives out full rtp buffers that contain important information for the depayloader.</li>
</ul>
<A HREF="../images/RTP-gst.png">Image 1</A> - Internals of RTPBin
<p></p>
<b>Notes</b>
<ul>
<li>Inside the bin, <b>rtpsink/rtcpsink</b> MUST receive <i>GstNetBuffers</i>. This contains important source information needed by rtpsession. Also, <b>rtpsrc/rtcpsrc</b> sends out <i>GstNetBuffers</i> that the sinks must use to send to the given destinations in the <i>GstNetBuffers</i>. (dynudpsink does this as an example).</li>
<li>If you need to reroute the packet flow, you will need to rewrite another rtpbin.</li>
</ul>
<h2>Pipeline construction</h2>
Here is what a pipeline would normally look like with the different modes :
<img SRC="../images/RTP-gst2.png" ALIGN="MIDDLE" WIDTH="670" HEIGHT="654" />
<b>Notes</b>
<ul>
<li>As a note for the first part, usually the payloader is embeded in the encoder because it requires some encoding specific marks and data, but it is possible to have it separate.</li>
<li>Also I have no tested/verified RTSP compatiblity yet, but it has been taken into account during the design. There are a few RTSP elements written by wtay that can probably be used successfully here.</li>
</ul>

  </body>
</page>
