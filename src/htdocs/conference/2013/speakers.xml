<?xml version="1.0"?>
<!DOCTYPE xml
[
  <!ENTITY % site-entities SYSTEM "../../entities.site">
    %site-entities;
    ]>

<?xml-stylesheet href="../../page.xsl" type="text/xsl"?>
<page>
  <title>GStreamer Conference 2013 Program </title>

<body lang="en-US" dir="LTR">

<h1>Speakers bio and abstracts - GStreamer Conference 2013</h1>
<h2>Edinburgh, Scotland, UK, 22-23 October 2013</h2>
<p><a href="&site;/conference">Back to conference main page</a></p>
<p><a href="schedule.html">Back to conference timetable</a></p>
<table width="100%" border="0" bordercolor="#C0C0C0" cellpadding="20" cellspacing="2">

	<tr valign="top" bgcolor="#E8E8FF"><td>
	<a name="muller-nextlevel" id="muller-nextlevel"></a>
	<p><b>
Keynote - Taking GStreamer to the Next Level, Tim-Philipp Müller (__tim)
    </b></p>
	<p>
Abstract coming soon
	</p>
	<p><i>
Biographical details coming soon
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="rothlisberger-stb-testing" id="rothlisberger-stb-testing"></a>
	<p><b>
Automated Set-top Box Testing with GStreamer, David Röthlisberger, YouView
    </b></p>
	<p>
We'll see how easy it is to develop a video-capturing image-recognition
system using GStreamer, by building one in 3 minutes!
    </p>
    <p>
A leading example of such a system is <a href="http://stb-tester.com/">stb-tester</a>,
an open-source tool developed at YouView to automate the user interface
testing of our set-top boxes. We'll see stb-tester in action, and hear
about the flexibility offered by its GStreamer underpinnings.
	</p>
	<p><i>
David Röthlisberger is the creator of stb-tester, and heads test automation at YouView.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="schleef-gss" id="schleef-gss"></a>
	<p><b>
Latest GStreamer Streaming Server features: Video on Demand, Smooth Streaming, and DRM, David Schleef (ds), Rdio
    </b></p>
	<p>
In the past year, GSS (GStreamer Streaming Server) has morphed from
a simple live streaming server into a web framework written in C,
with a strong media bias.  This talk will be a reintroduction to
GSS with information on features, how to use and deploy GSS, and
future directions.  New features, such as the video-on-demand system,
Microsoft Smooth Streaming, MPEG DASH, and DRM encryption will be
discussed in detail.  The deployment of GSS at Rdio Inc for video
streaming will be used as an example.
	</p>
	<p>
GSS is a custom standalone HTTP server and web framework written in
GLib-style C and based on GStreamer, Libsoup for HTTP processing,
Bootstrap for HTML user interface, and JSON-GLib for request processing.
Streaming protocols include HTTP, RTSP, RTMP, Icecast, HTTP Live
Streaming, Microsoft Smooth Streaming, and MPEG DASH.
	</p>
	<p><i>
David Schleef is a long-time contributor in the open-source
community, working on projects such as GStreamer, the Dirac video
codec, Swfdec, Orc, Debian, Comedi, and Xiph.org projects.  He is
a Senior Engineering Manager at Rdio Inc, handling music and video
ingestion, transcoding, and streaming.  His current interests
relate to improving the tools used for converting and delivering
high-quality content to viewers.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="droge-hw-integration" id="droge-hw-integration"></a>
	<p><b>
The never-ending story: GStreamer and hardware integration, Sebastian Dröge (slomo)
    </b></p>
	<p>
In the past usage of specialized hardware features, especially those of embedded
hardware DSPs, VPUs and GPUs, was always a challenge with GStreamer. GStreamer
0.10 had many shortcomings in this area, and many hacks were necessary
to use hardware in an efficient way or make it usable at all. In GStreamer
1.0 and later versions many new interfaces were introduced or existing
interfaces were improved to allow clean and efficient integration of
specialized hardware features. This talk will provide an overview about
these changes, with examples of usage for APIs like OpenGL, EGL, OpenMAX IL,
VDPAU, VAAPI. There will also be some guidance about which interfaces should be
used how and in which cases.
	</p>
	<p><i>
Sebastian Dröge is, among other things, a free software developer and
one of the GStreamer maintainers and core developers since 2006 and
also contributing to many other free software projects.
While finishing his computer sciences degree, he started to work as a
contractor for Collabora and stayed there until 2013 to work on GStreamer
and related technologies. He also was the technical lead of the GStreamer
SDK project at Collabora, which provides easy to use binaries for Windows,
Mac OS X, Android and iOS.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="waters-opengl" id="waters-opengl"></a>
	<p><b>
GStreamer and OpenGL plugins in 1.0, Matthew Waters (ystreet00)
    </b></p>
	<p>
OpenGL is a powerful API usually accompanied by powerful hardware that
currently goes mostly unused by GStreamer.  Equipped with GLSL, one can
envisage complex (or simple) filters that transform the typical video
into a psychedelic light show.  This talk will provide for the current
state of gst-plugins-gl and a look into the future of GStreamer with OpenGL.
	</p>
	<p><i>
Matthew Waters has only just started his hopefully long and rewarding
FOSS career after using Linux for the past couple of years.  When he
isn't hacking on gst-plugins-gl, he is attending University and playing
around with waveforms.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="taymans-rtsp" id="taymans-rtsp"></a>
	<p><b>
Latest GStreamer RTSP Server features, Wim Taymans (wtay), Collabora
    </b></p>
	<p>
This talk presents an RTSP server built on top of GStreamer and its various
RTP elements and libraries. We will cover the design of the server and
how it integrates with GStreamer. We will also talk about some of the new
features such as the security infrastructure and multicast support.
	</p>
	<p><i>
Wim Taymans has a computer science degree from the Katholieke Universiteit
in Leuven, Belgium and decades of software development experience. He
co-founded the GStreamer multimedia framework in 1999 and is the person
behind much of the current design. Wim has a long history in the development
of multimedia software, starting with computer game development on the
Commodore 64. Wim Taymans is working on assisting Collabora customers with
the design and use of  GStreamer as well as general research and development.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="morales-android-ios" id="morales-android-ios"></a>
	<p><b>
GStreamer for Mobile Platforms: Android and iOS, Andoni Morales (ylatuya), Fluendo
    </b></p>
	<p>
Mobile platforms such as Android and iOS are growing very fast and GStreamer
offers an excellent alternative to the native API's to develop complex
multimedia applications. The recent work on the GStreamer SDK to port the
missing bits to these platforms, combined with cerbero's build system,
provides all the tools for developers to use it as their multimedia framework
and create apps ready to be deployed to the Android Market and App Store.
    </p>
    <p>
This talk will cover the new system plugins for these platforms and describe
the build process used to compile GStreamer and its dependencies. We will also
describe the integration with the native build systems and how GStreamer is
bundled in the application. Finally we will show an example on how to build a
simple media player for Android with Eclipse and for iOS with XCode.
	</p>
	<p><i>
Andoni Morales is a software engineer with experience in multimedia middleware,
cross-platform applications and build systems. Andoni holds a master degree in
Telecommunications Engineering and he is a multimedia engineer at Fluendo,
working in the design and development of the company’s multimedia solutions.
On his spare time, he works in LongoMatch, a performance video analysis tool
for sports powered by GStreamer.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="kim-alt-playback" id="kim-alt-playback"></a>
	<p><b>
Alternative playback solutions for Hardware Manufacturers, Jeongseok Kim, LG Electronics
    </b></p>
	<p>
LGE is developing a mediaframework for WebOS based on Gstreamer. Although
GStreamer provides very good architecture, LGE still has problems to adapt
for restricted environments  such as limitation of hardware, and
product-specified requirements so that I and my team decided to design an
alternative playback solutions. In this talk, I'll share a short story and
our approach to make  solutions for unusual requirements. This talk would be
helpful for developers who are trying to make their own products with playbin.
	</p>
	<p><i>
Jeongseok Kim has worked for over 10 years as an embedded system software
developer. At LG Electronics he's a senior research engineer and also the
leader of GStreamer core team for WebOS.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="picard-stb-player" id="picard-stb-player"></a>
	<p><b>
GStreamer-based Media Player for SetTopBox, Romain Picard, SoftAtHome
    </b></p>
	<p>
Good quality multimedia playback is now a mandatory feature in SetTopBox
devices. Providing the same user experience on multiple settopbox and chipset
can be challenging since the hardware and software/driver specifications are
different for each device. Moreover more container/codec combinations must be
supported each year. We present a multimedia player design allowing progressive
enhancement and easy board customization with minimal code changes, leveraging
the GStreamer framework modularity.
	</p>
	<p><i>
Romain Picard is software architect at SoftAtHome, a software editor based
in France and Belgium. He has been working for more than 10 years on digital
tv. He was involved in the design and development of media components used
in many SetTopBoxes : dvb player, recorder and streamer, multimedia player.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="moutte-flump" id="moutte-flump"></a>
	<p><b>
FluMediaPlayer: Growing our user base through high level media player API, Julien Moutte (dolphy), Fluendo
    </b></p>
	<p>
Thanks to the GStreamer SDK effort it is now possible to easily build and
deploy GStreamer applications on almost all major operating systems in the
market. However GStreamer API is still pretty complex/low level in comparison
to competition on those new platforms. Indeed, creating a simple, yet powerful
media player using Java on Android or Objective C on iOS, can become a serious
nightmare for the usual "App" developer which is used to a simple
_open/_play/_close API.
	</p>
	<p>
Fluendo created a media player engine aiming at making it straightforward to
create such applications leveraging GStreamer's versatile infrastructure to
support all media formats, adaptive streaming, hardware accelerated decoding,
etc. Thanks to its high level API (C, JNI, ...) it is now much faster and
easier to start using GStreamer in your "App" and benefit from the cross
platform goodness it can offer you without becoming a GStreamer guru.
	</p>
	<p><i>
Combining both a strong technical and business understanding of the IT market,
Moutte co-founded more than 4 companies since 1998 before bringing his
visionary leadership to the establishment of the Fluendo group in 2004.
An active contributor to the Free Software community since 2001, Moutte has
participated in the creation of GStreamer, the multimedia framework chosen by
most multimedia software producers. Moutte has also been at the origin of
several innovative solutions within the multimedia environment.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="calvar-webkit" id="calvar-webkit"></a>
	<p><b>
WebKit and GStreamer, Xabier Rodríguez Calvar (calvaris), Igalia
    </b></p>
	<p>
WebKit is a well known open source browser engine used by Apple, GNOME,
EFL, Blackberry and others and shares quite a big codebase with Blink.
It was the result of a fork from KHTML and KJS.
	</p>
	<p>
As a simplification we can say that it has three main layers, the API,
the core and the backend. The different ports implement their API and
their backends and the core is shared. WebKit 2 is robust and
transparent multiprocess architecture allowing safer interactions with
webpages.
	</p>
	<p>
GStreamer is the multimedia backend of some WebKit ports and in this
talk we will see its architecture, status, challenges and future.
	</p>
	<p><i>
Xabier Rodríguez Calvar (calvaris) is a Free Software developer living
in A Coruña and partner at Igalia. He has always worked on GNOME
technologies though he has also experience in Qt. These last years he
has focused his energies in multimedia with GStreamer and now he is a
WebKit hacker.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="quessy-toonloop" id="quessy-toonloop"></a>
	<p><b>
Application Showcase: Toonloop, the Live Stop Motion Editor, Alexandre Quessy (aalex), Collabora
    </b></p>
	<p>
Toonloop is a free software for live stop-motion animation. It allows to
create frame by frame animation, pixilation and other animation
techniques. Developed by Alexandre Quessy since 2008, the software
recalls the experiments of Norman McLaren and Pierre Hébert and has the
particularity to show the result all the while users are creating new
images. By giving an instant feedback to its users, Toonloop encourages
video contents creation. The whole process can be fun to watch, and it
is suitable for live performing arts.
	</p>
	<p>
With Toonloop, creators can create stop motion animations in a wink. The
images of the resulting clips are displayed in a never ending loop. Each
image is added one by one. Toonloop can be useful for different
purposes, such as teaching new media technique and theory, art-therapy,
VJing, rapid prototyping, and more.
	</p>
	<p>
Toonloop as been written in the C++ language using GStreamer for its
video pipeline. It is interoperable via MIDI and OpenSoundControl, and
supports some special effects or playback modes. Toonloop is a free
software released under the terms of the GPL.
	</p>
	<p>
In this presentation, the creator of Toonloop will explain the project
and demonstrate it in a short live performance. The presentation should
last around 30 minutes, or longer if desired.
	</p>
	<p><i>
Alexandre Quessy is a Montreal-based artist and software developer. He
is interested in sampling audio, video and data. He is much involved in
creating and teaching free software for arts. His projects went to
Canada, USA, Norway, France, Mexico, Taiwan and Belgium. He is the main
author of the Toonloop live animation software. Quessy studied
communication and music. He is a software engineer at Collabora, and a
member of the artist-run centre Perte de Signal.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="frisch-dreambox" id="frisch-dreambox"></a>
	<p><b>
Case Study: GStreamer on the Dreambox, Andreas Frisch (fraxinas), Dream Property
    </b></p>
	<p>
The Dreambox is a prototypical example of a multimedia embedded linux
device and has been making use of Gstreamer since 2006. In this case
study, I will shortly introduce our line of consumer electronics
products and then focus on how it relies on Gstreamer: what were the
pitfalls and how did we (fail to) master them? The talk will explain
how we solved audio and video playback with SOC hardware decoders
using the LinuxTV API and custom Gstreamer sink elements. I will
expound on how our Gstreamer 1.0 port is coming along and what plans
the future holds.
	</p>
	<p><i>
Andreas aka "Fraxinas" in the FOSS world, graduated from the
University of Applied Sciences in Aschaffenburg with a degree in
electrical engineering and information technology. Since writing his
thesis paper about a streaming video server for set top boxes, he has
been working for Dream Multimedia, the company which released the
first Linux-based STB called "Dreambox".
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="vermeir-hevc" id="vermeir-hevc"></a>
	<p><b>
Next Generation Video Coding with HEVC: Facts and Figures, Thijs Vermeir (lovebug356), Barco
    </b></p>
	<p>
HEVC (High Efficiency Video Coding) is developed as the successor of the
H.264/AVC video coding standard. The goal of the HEVC standardization process
was to develop new algorithms to reduce the bandwidth by 50% for equivalent
perceptual quality and to support higher resolutions. A first version of the
standard was published in January 2013. But next to the technical details,
market adoption is even more important for a codec’s success. There are a lot
of questions that need answering: Why is the performance of H.264/AVC not good
enough? Do we really need better compression? Is the market ready for HEVC?
Are we able to notice the difference between HD and 4k (or 8k)? Is there
silicon available? …
    </p>
    <p>
The first part of the talk will provide a high level overview of HEVC, with
respect to the improved coding tools as well as performance. The second part
of the talk will provide insight on how this new codec can be adopted in the
market and what the burdens are on its way to success.
	</p>
	<p><i>
Thijs Vermeir has been contributing to the GStreamer project since 2006. After
working at Fluendo, he is now research engineer for Barco, where he is
doing research in video processing including video compression and network
streaming.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="sauer-mediainfo" id="sauer-mediainfo"></a>
	<p><b>
Application Showcase: gst-media-info, Stefan Sauer (ensonic), Google
    </b></p>
	<p>
GStreamer has the discoverer feature to quickly collect metadata from media
files. The included command-line tool is not convenient for going through a
larger set of files. In this demo I show gst-mediainfo as an alternative UI.
	</p>
	<p><i>
Stefan is a software engineer working for Google on build infrastructure tools.
In the past he was working for Nokia on the multimedia stack used on their
maemo/meego internet tablets and phones. In his free time his is contributing
to GStreamer, other GNOME projects (e.g. gtk-doc) and working on his music
editor buzztrax. He has a PhD in Human Computer Interaction from the Technical
University of Dresden/Germany. Stefan now lives in Munich/Germany with his
wife and his two kids.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="duponchelle-saunier-ges" id="duponchelle-saunier-ges"></a>
	<p><b>
GES - The Open Source Swiss Army Knife of Multimedia Editing, Mathieu Duponchelle (Mathieu_Du) and Thibault Saunier (thiblahute)
    </b></p>
	<p>
The purpose of this talk is to first present the current state of
Gstreamer Editing Services, and in a second time analyse how our design, and
the design of the underlying framework, will allow us to provide solutions
to the various challenges the multimedia edition world will throw at us.
An offline, featureful video editor named Pitivi makes extensive use of GES
and serves partly as a showcase, but we will show how GES has the potential
to be used in much more use cases than this particular one: online editing,
collaborative editing, live broadcasting, and how Pitivi could be extended
to match specific use cases.
	</p>
	<p><i>
Mathieu Duponchelle is a student in Epitech Paris. He contributes to pitivi and
GStreamer since 2010, and, as of September 2013, is finishing a Google Summer
of Code which purpose was to eliminate as many bugs as possible across the
multimedia stack.
	</i></p>
	<p><i>
Thibault Saunier joined the PiTiVi project as a Summer of Code student in 2010
and has been hooked ever since. He now maintains and leads PiTiVi, GNonLin
and GStreamer Editing Services development.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="emont-cairosink" id="emont-cairosink"></a>
	<p><b>
Cairosink and GPU Buffer Sharing, Guillaume Emont (guijemont), Igalia
    </b></p>
	<p>
GStreamer 1.0 introduced a new architecture that makes memory management
easier. In particular, handling non-system memory and sharing it between
elements is made easier.
    </p>
    <p>
While building a video sink for cairogles, I wanted to explore the possibility
of sharing GPU memory (in my case, GL or GLES textures) between elements of a
pipeline. In this talk, I will explain how I made the various parts fit
together, and discuss the challenges that I have met and how I have worked on
them.
	</p>
	<p><i>
Guillaume Emont has been playing around on various things related to multimedia
(Elisa/Moovida, Pigment, Grilo and of course GStreamer) in the Free software
world for a few years and enjoys it a lot. He is proudly part of the awesome
group of hackers known as Igalia.
    </i></p>
    <p><i>
When he doesn't hack on software, he enjoys travelling around the world,
discussing with like-minded people around a drink or a good meal, various
outdoor sports in and around sunny Barcelona, helium balloon photography or
building interactive laser installations, among many other things.
	</i></p>
	</td></tr>

	<tr valign="top" bgcolor="#E8E8FF"><td>
	<a name="taymans-pitfalls" id="taymans-pitfalls"></a>
	<p><b>Keynote - Pitfalls and Best Practices for Using GStreamer to Build Products, Wim Taymans (wtay), Collabora</b></p>
	<p>
This Keynote compiles a set of guidelines and best practices for integrating
GStreamer into your products. It is meant to be a series of 'lessons
learnt' from a decade of GStreamer consulting which can hopefully help you
avoid some of the common pitfalls. We will talk about integration with
existing hardware and software solutions as well as dealing with the community
to make the most out of GStreamer and its ecosystem.
    </p>
	<p><i>
Wim Taymans has a computer science degree from the Katholieke Universiteit
in Leuven, Belgium and decades of software development experience. He
co-founded the GStreamer multimedia framework in 1999 and is the person
behind much of the current design. Wim has a long history in the development
of multimedia software, starting with computer game development on the
Commodore 64. Wim Taymans is working on assisting Collabora customers with
the design and use of  GStreamer as well as general research and development.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="olbrich-embedded" id="olbrich-embedded"></a>
	<p><b>
Multimedia on Embedded Linux - Pushing GStreamer to its Limits, Michael Olbrich, Pengutronix
</b></p>
	<p>
Modern ARM SoCs have a number of hardware multimedia units. GStreamer's
modular design makes it the ideal candidate to integrate these units into a
multimedia application.
    </p>
    <p>
This talk is a chronicle of GStreamer application development on Freescale
i.MX53 SoCs. It shows the problems faced when working with embedded systems
in general and the challenges encountered while integrating hardware
acceleration units like the scaler/colorspace converter or the video
encoder/decoder.
    </p>
    <p>
I intend to show what can be done when putting it all together, because
decoding and displaying a video or encoding and streaming from a camera
barely scratches the surface of what can be done with GStreamer on embedded
systems.
	</p>
	<p><i>
Michael works for Pengutronix on embedded Linux topics and has been using
GStreamer here for several years. He recently started to contribute to
GStreamer, mostly to the video4linux plugin and related topics.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="hervey-time" id="hervey-time"></a>
	<p><b>
Time and Synchronization for Dummies (yes, you!), Edward Hervey (bilboed), Collabora
</b></p>
	<p>
An overview of all time usages in GStreamer, how it all fits
together, and what can be improved. If you are unsure about time and
synchronization in GStreamer, this is your chance to fix that.
	</p>
	<p><i>
Edward Hervey has been contributing since 2003 to the GStreamer
framework. Edward is interested in all fields of applications and usage of
GStreamer, which he applies as the Multimedia Domains Lead at Collabora
where he has worked for the past 6 years.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="leeman-drive-towards-software" id="leeman-drive-towards-software"></a>
	<p><b>
GStreamer and the move from a hardware centric product design towards a software centric product design, Marc Leeman (den_erpel), Barco
</b></p>
	<p>
Until quite recently, the domain of professional video processing in our
company has been the exclusive domain of hardware engineers and opticians.
	</p>
	<p>
As digital and streaming video entered the professional markets in the
beginning of the new millennium, the complex and often unstandardised
formats required some kind of pre-processing of the streams. Later,
all kinds of session management systems started to come into the
picture. This required the introduction of some kind of control logic
on the devices itself; best performed by a software layer.
	</p>
	<p>
However, next to overall management software on the system level,
the software on the devices themselves was limited to control of the
peripherals and user interaction. Traditional hardware design was still
very much at the core of the products.
	</p>
	<p>
Two main drivers shattered this comfort zone: increasing parallelism in
processors combined with mature and stable user-land open source software.
	</p>
	<p>
While the initial investment of hardware design is high, creating a
significant step-in cost; a software approach is flexible and runs on, in
comparison, "low cost" hardware. Deciding on custom hardware design is
currently like crossing the Rubicon: committing resources for longer
periods of time. These decisions must be taken with the utmost care.
	</p>
	<p>
This talk focusses on the disruptive nature of this marriage of
technologies in an environment where hardware design was at the core
of what we did. The focus is on how GStreamer is a driving force in
the transition; impacting day-to-day work, training, product design and
system definition.
	</p>
	<p><i>
Marc has a background in electrical engineering and performed research
on the usage and impact of dynamic memory in small and constrained
systems.
	</i></p>
	<p><i>
Putting theory to practice; he joined Barco, where he did U-Boot and
the Linux kernel porting to a line of embedded streaming video products
and was part of a team that designed the users pace software. When more
powerful processing became available, he introduced GStreamer in a stream
normalising system, that in turn was used for software decoding and made
full circle to "embedded systems".
	</i></p>
	<p><i>
In his spare time, he's mainly driving his three daughters to horse
riding academy or does some road bicycle racing and has recently taken
up the challenge to construct his own carbon bicycle. He does some
Debian package maintenance and published a low cost system to control
KNX automation systems.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="schmidt-gst-enabled-home" id="schmidt-gst-enabled-home"></a>
	<p><b>
My GStreamer-Enabled Home, Jan Schmidt (thaytan)
</b></p>
	<p>
Officially, this is a talk about using GStreamer around the house.
	</p>
	<p>
Really, it's a talk about being lazy, chickens, sheds and tiny humans.
	</p>
	<p>
It might also touch on network media, streaming and synchronisation.
	</p>
	<p><i>
Jan Schmidt has been a GStreamer developer and maintainer since 2002. He
is responsible for GStreamer's DVD support, and primary author of the
Aurena home-area media player. He lives in Albury, Australia and keeps
sheep, chickens, ducks and more fruit trees than is sensible.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="graff-testing" id="graff-testing"></a>
	<p><b>
Achieving Pexcellence - Challenges of real time streaming applications, Håvard Graff (hgr), Pexip
</b></p>
	<p>
How can you test real time systems deterministically? How can you fix bugs that
only happens once every millionth run of your application? (and never with you
or your debugger present). Pexip have invested a lot of time and effort towards
these issues, and we want to share some of our thoughts, techniques and code
with you.
	</p>
	<p><i>
Håvard Graff has worked with GStreamer professionally for 6 years in Tandberg,
Cisco and now Pexip. Developing video conferencing systems like Movi, Jabber
Video and Pexip Infinity using GStreamer as the backbone. Was instrumental in
premiering GStreamer in the AppStore. Still pretends to be a musician with
programming as a hobby.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="raghavan-pulseaudio" id="raghavan-pulseaudio"></a>
	<p><b>
Return of the PulseAudio Update, Arun Rhagavan (Ford_Prefect), Collabora
</b></p>
	<p>
When we last left or heroes, it was autumn in Prague, 2011. A 1.0 release has
just been made, the citizens of Linuxia were rejoicing and world domination was
close at hand.
	</p>
	<p>
In this next chapter of our heroes' adventures we shall see what fate befalls
them, as they navigate the swamps of Android, fight the beasts of ARM, and
finally vanquish the Use Case Manager. Will they finally get a stable release
cycle? Will they stop breaking your audio? Join us, to find out more!
	</p>
	<p><i>
Arun Raghavan is a long-time open source support and contributor. He works at
Collabora where he hacks on PulseAudio, GStreamer, and whatever else comes his
way. You can usually find him on the usual IRC networks as Ford_Prefect,
demanding that you get off his lawn.
	</i></p>
	</td></tr>

	<tr valign="top"><td>
	<a name="maxwell-free-codecs" id="maxwell-free-codecs"></a>
	<p><b>
Free Codecs Update: Opus and Daala, Greg Maxwell (gmaxwell), Mozilla
</b></p>
	<p>
Abstract coming soon.
	</p>
	<p><i>
Greg has worked on unencumbered multimedia codecs with the Xiph.Org Foundation
since 1999 and is currently working for Mozilla on next-generation royalty-free
video coding standards.
	</i></p>
	</td></tr>
</table>

</body>
</page>
