<?xml version="1.0"?>
<!DOCTYPE xml
[
  <!ENTITY % site-entities SYSTEM "../entities.site">
  %site-entities;
]>

<?xml-stylesheet href="../page.xsl" type="text/xsl"?>
<page>
<head>
  <title>GStreamer Google Summer of Code OpenGL ideas</title>
</head>
<body>
<h1>GStreamer Google Summer of Code OpenGL ideas</h1>

<p>
<quot>The following ideas aim to improve gst-plugins-gl to make it more pluggable with real world applications</quot>
</p>


<h2>Project idea 1: make external sink(s) compatible with gst-gl</h2>
<p>
external gl sink = clutter (cluttersink/coglsink), cairo (cairosink), Qt (qtglvideosink), webkit (webkitvideosink)
</p>

<p>
Applications generally just would like to be able to use the gltexture that come from gst-gl and use it to do whatever they would like to do with it.
There were several attempts with cluttershare.c, sdlshare.c, qtgltextureshare.c examples. Those demos work but it's not easy for the user.
Also most of the time applications are not using the GstVideoOverlay interface and prefer to use a dedicated video sink. For example cluttersink in totem, pitivi and cheese.
</p>

<code>
<p>
gst-launch-1.0 videotestsrc ! gleffects ! cluttersink
</p>
<p>
gst-launch-1.0 playbin uri=foo video-sink="gleffects ! cluttersink"
</p>
</code>

<p>
More details <a href="https://bugzilla.gnome.org/show_bug.cgi?id=723674">here</a>
</p>

<h2>Project idea 2: new glcontrol element</h2>
<p>
glcontrol draws controls (play/pause button, seek bar, volume, quality) into a separate gltexture and attach it to the input buffer's GstVideoOverlayCompositionMeta.
Then a downstream element could call gst_video_overlay_composition_blend to show up the controls.
</p>

<code>
gst-launch-1.0 playbin uri=foo video-sink="glcontrol ! glimagesink"
</code>

<p>
More details <a href="https://bugzilla.gnome.org/show_bug.cgi?id=723680">here</a>
</p>

<h2>Project idea 3: port libvisual_gl gstgl elements to gst-1.0 and then to GLES2</h2>

<p>
This would enable an efficient gstreamer audio visualizer on embedded platforms.
This project is also open to use another opensource audio visualizer API that support GL.
</p>

<p>
More details <a href="https://bugzilla.gnome.org/show_bug.cgi?id=723681">here</a>
</p>

<h2>Project idea 4: make gst-gl compatible with gstreamer Python binding and pyopengl</h2>
<p>
Make it possible to use a gltexture that comes from gst-gl into a gstreamer python application that uses <a href="http://pyopengl.sourceforge.net/context/tutorials/index.xhtml">pypoengl</a>
</p>

<p>
More details <a href="https://bugzilla.gnome.org/show_bug.cgi?id=723683">here</a>
</p>


<h2>Project idea 5: add EGLImage support</h2>
<p>
Will replace gst-plugins-bad/gst-libs/gst/egl.
</p>

<code>
<p>
omxvideodec ! glimagesink
</p>
<p>
In webkit: playbin uri=foo video-sink="eglimagetrans ! webkitvideosink"
</p>
<p>
gleffects ! omxvideoenc
</p>
</code>

<p>
More details <a href="https://bugzilla.gnome.org/show_bug.cgi?id=703343">here</a>
</p>

<h2>Project idea 6: add support for subtitles</h2>
<p>
Similar to textoverlay element.
Use an external GL Font API to build a separate gltexture and attach it to the input buffer's GstVideoOverlayCompositionMeta.
Then a downstream element could call gst_video_overlay_composition_blend to show up the subtitles.
</p>

<code>
gst-launch-1.0 filesrc location=text.srt ! subparse ! text/x-raw ! gltextoverlay.text_sink ! glimagesink
</code>

<p>
More details <a href="https://bugzilla.gnome.org/show_bug.cgi?id=723761">here</a>
</p>

<h2>Project idea 7: new KTX texture parser</h2>

<code>
gst-launch-1.0 filesrc location=texture.ktx ! glktxparse ! glimagesink
</code>

<p>
<a href="http://www.khronos.org/opengles/sdk/tools/KTX/">KTX format</a>
</p>

<p>
More details <a href="https://bugzilla.gnome.org/show_bug.cgi?id=723768">here</a>
</p>


<h2>Project idea 8: make gst-gl compatible with DirectX</h2>
<p>
gl element should be able to handle dx surface as input.
</p>

<code>
<p>
gst-launch-1.0 ... ! dxvadec ! glimagesink
</p>
<p>
gst-launch-1.0 videotestsrc ! gleffects ! d3dvideosink
</p>
</code>

<p>
Also investigate about accelerated video decoding on Windows (DXVA).
</p>

<p>
More details <a href="https://bugzilla.gnome.org/show_bug.cgi?id=723772">here</a>
</p>


<h2>Project idea 9: add supports for glCompressedTexImage2D</h2>

<p>
More details <a href="https://bugzilla.gnome.org/show_bug.cgi?id=723781">here</a>
</p>

<h2>Project idea 10: new glfakevideodec element</h2>

<p>
Useful to visually evaluate the display performance you would have with a decoder that does not use CPU.
Especially if you use GstVideoOverlay or a custom video sink embedded in an application.
</p>

<p>
More details <a href="https://bugzilla.gnome.org/show_bug.cgi?id=723779">here</a>
</p>

</body>
</page>
